package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// ImageSigningSpec defines the desired state of ImageSigning
// +k8s:openapi-gen=true
type ImageSigningSpec struct {
	// Registry is for specifying the resistry name with namespace which signature verification is enforced.
	// for example image-registry.openshift-image-registry.svc:5000/kabanero
	Registry string `json:"registry"`
	// Either Identity or Keypair needs to be set.
	// When Identity is set, a keypair will be generated based on the attributes of Identity.
	// When Keypair is set, the keypair will be imported from Keypair.
	// Keypair takes precedence when both are set.
	Identity *SignatureIdentity `json:"identity,omitempty"`
	Keypair  *SignatureKeypair  `json:"keypair,omitempty"`
}

// SignatureIdentity defines the identity of the signature.
// +k8s:openapi-gen=true
type SignatureIdentity struct {
	Name    string `json:"name"`              // name of RSA signature key
	Email   string `json:"email"`             // email address of RSA signature key
	Comment string `json:"comment,omitempty"` // comment of RSA signature key
}

// SignatureKeypair defines the keypairs to be imported.
// +k8s:openapi-gen=true
type SignatureKeypair struct {
	// in order to handle multi line data in yaml file, adding |= characters at the top of the data.
	// which indicate the data is literal and chomping.
	SecretKey string `json:"secretKey"` // ascii armored RSA secret key which was generated by using specified name, comment and email.
	PublicKey string `json:"publicKey"` // ascii armored RSA public key which was generated by using specified name, comment and email.
}

// ImageSigningStatus defines the observed state of ImageSigning
// +k8s:openapi-gen=true
type ImageSigningStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
	// Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
	Generated    bool              `json:"generated"` // true when key has been generated
	Registry     string            `json:"registry"`
	ErrorMessage string            `json:"errorMessage"` // last error message
	Keypair      *SignatureKeypair `json:"keypair,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ImageSigning is the Schema for the imagesignings API
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=imagesignings,scope=Namespaced
type ImageSigning struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ImageSigningSpec   `json:"spec,omitempty"`
	Status ImageSigningStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ImageSigningList contains a list of ImageSigning
type ImageSigningList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageSigning `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ImageSigning{}, &ImageSigningList{})
}
