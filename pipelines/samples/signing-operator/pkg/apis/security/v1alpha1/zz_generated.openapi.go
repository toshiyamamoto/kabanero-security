// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/security/v1alpha1.ImageSigning":       schema_pkg_apis_security_v1alpha1_ImageSigning(ref),
		"./pkg/apis/security/v1alpha1.ImageSigningSpec":   schema_pkg_apis_security_v1alpha1_ImageSigningSpec(ref),
		"./pkg/apis/security/v1alpha1.ImageSigningStatus": schema_pkg_apis_security_v1alpha1_ImageSigningStatus(ref),
		"./pkg/apis/security/v1alpha1.SignatureIdentity":  schema_pkg_apis_security_v1alpha1_SignatureIdentity(ref),
		"./pkg/apis/security/v1alpha1.SignatureKeypair":   schema_pkg_apis_security_v1alpha1_SignatureKeypair(ref),
	}
}

func schema_pkg_apis_security_v1alpha1_ImageSigning(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageSigning is the Schema for the imagesignings API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/security/v1alpha1.ImageSigningSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/security/v1alpha1.ImageSigningStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/security/v1alpha1.ImageSigningSpec", "./pkg/apis/security/v1alpha1.ImageSigningStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_security_v1alpha1_ImageSigningSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageSigningSpec defines the desired state of ImageSigning",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"registry": {
						SchemaProps: spec.SchemaProps{
							Description: "Registry is for specifying the resistry name with namespace which signature verification is enforced. for example image-registry.openshift-image-registry.svc:5000/kabanero",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"identity": {
						SchemaProps: spec.SchemaProps{
							Description: "Either Identity or Keypair needs to be set. When Identity is set, a keypair will be generated based on the attributes of Identity. When Keypair is set, the keypair will be imported from Keypair. Keypair takes precedence when both are set.",
							Ref:         ref("./pkg/apis/security/v1alpha1.SignatureIdentity"),
						},
					},
					"keypair": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/security/v1alpha1.SignatureKeypair"),
						},
					},
				},
				Required: []string{"registry"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/security/v1alpha1.SignatureIdentity", "./pkg/apis/security/v1alpha1.SignatureKeypair"},
	}
}

func schema_pkg_apis_security_v1alpha1_ImageSigningStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageSigningStatus defines the observed state of ImageSigning",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"generated": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"registry": {
						SchemaProps: spec.SchemaProps{
							Description: "true when key has been generated",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"errorMessage": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"keypair": {
						SchemaProps: spec.SchemaProps{
							Description: "last error message",
							Ref:         ref("./pkg/apis/security/v1alpha1.SignatureKeypair"),
						},
					},
				},
				Required: []string{"generated", "registry", "errorMessage"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/security/v1alpha1.SignatureKeypair"},
	}
}

func schema_pkg_apis_security_v1alpha1_SignatureIdentity(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SignatureIdentity defines the identity of the signature.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "name of RSA signature key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"comment": {
						SchemaProps: spec.SchemaProps{
							Description: "email address of RSA signature key",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "email"},
			},
		},
	}
}

func schema_pkg_apis_security_v1alpha1_SignatureKeypair(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SignatureKeypair defines the keypairs to be imported.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secretKey": {
						SchemaProps: spec.SchemaProps{
							Description: "in order to handle multi line data in yaml file, adding |= characters at the top of the data. which indicate the data is literal and chomping.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"publicKey": {
						SchemaProps: spec.SchemaProps{
							Description: "ascii armored RSA secret key which was generated by using specified name, comment and email.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"secretKey", "publicKey"},
			},
		},
	}
}
